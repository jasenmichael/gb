<template>
  <div class="top mt-4">
    <h1 class="text-center">Homeschool Enrichment Program</h1>
    <h2 class="text-center">Spring 2019 Schedule</h2>
    <hr />
    <div
      v-for="(day, index) in getDaysClassesHeld()"
      :key="`getDaysClassesHeld-${index}`"
    >
      <h4>{{ day }}s</h4>
      <mdb-datatable
        class="pt-4"
        :data="{ columns, rows: getClassesOn(day) }"
        responsive
        striped
        bordered
        :searching="false"
        :pagination="false"
        :sorting="false"
        :tfoot="false"
        :max-height="'490px'"
      />
      <hr
        v-if="`getDaysClassesHeld-${index}` !== getDaysClassesHeld().length"
      />
    </div>
  </div>
</template>
<script>
import axios from 'axios'
import { mdbDatatable } from 'mdbvue'
export default {
  name: 'DatatablePage',
  components: {
    mdbDatatable
  },
  data() {
    return {
      daysClassesHeld: [],
      columns: [
        {
          label: 'Starts At',
          field: 'starts_at'
        },
        {
          label: 'Activity/Class',
          field: 'name'
        },
        {
          label: 'Age Range',
          field: 'ages'
        },
        {
          label: 'Teacher(s)',
          field: 'teachers'
        },
        {
          label: 'Ends At',
          field: 'ends_at'
        }
      ],
      classes: []
    }
  },
  beforeMount() {
    this.daysClassesHeld = this.getDaysClassesHeld
  },
  mounted() {
    // const url = '/data/'
    // const url = 'https://gb-strapi.herokuapp.com/'
    const url = 'http://localhost:1337/'
    // const url = 'http://localhost:9000/.netlify/functions/'
    // return axios.get(url + 'classes.json').then(res => {
    return axios.get(url + 'classes').then(res => {
      const classes = res.data
      // eslint-disable-next-line
      console.log('YOOOOOOOOOOO', classes)
      const formattedClasses = []
      for (let i = 0; i < classes.length; i++) {
        const course = classes[i]
        formattedClasses.push({
          _id: course._id,
          name: course.name,
          starts_at: this.formatTime(course.starts_at),
          ages: course.ages || 'all',
          teachers: this.getNamesArray(course.teachers)
            .toString()
            .replace(/,Rotating/g, '/Rotating')
            .replace(/,/g, ', '),
          ends_at: this.formatTime(course.ends_at),
          days: this.getNamesArray(course.days)
        })
      }
      this.classes = formattedClasses
    })
  },
  methods: {
    getDaysClassesHeld: function() {
      const daysClassesHeld = []
      this.classes.forEach(course => {
        course.days.forEach(day => {
          if (!daysClassesHeld.includes(day)) {
            daysClassesHeld.push(day)
          }
        })
      })
      return daysClassesHeld
    },
    getClassesOn: function(day) {
      const classes = this.classes.filter(el => el.days.includes(day))
      return classes.sort(this.sortByEarliest)
    },
    sortByEarliest: function(a, b) {
      return this.getSortableTime(a) > this.getSortableTime(b)
    },
    getSortableTime: function(course) {
      let sortableTime = parseInt(
        course.starts_at.slice(0, -3).replace(':', '')
      )
      // let sortableTime = parseInt(course.starts_at)
      if (parseInt(sortableTime) < 1300 && parseInt(sortableTime) > 1159) {
        sortableTime = sortableTime + 1200
      }
      return sortableTime
    },
    formatTime: time => {
      const amPm = time < 1159 ? 'AM' : 'PM'
      const trimmedTime = time => {
        return time.charAt(0) === '0' ? time.substr(1) : time
      }
      const insertColin = trimTime => {
        return trimTime.length === 3
          ? `${trimTime}`.slice(0, 2) +
              ':' +
              `${trimTime}`.slice(1, 3) +
              ` ${amPm}`
          : `${trimTime}`.slice(0, 1) +
              ':' +
              `${trimTime}`.slice(1, 3) +
              ` ${amPm}`
      }
      const formattedTime = time => {
        if (trimmedTime(time) > 1259) {
          const trimTime = trimmedTime(time) - 1200
          //   return trimTime.length === 3
          //     ? `${trimTime}`.slice(0, 2) +
          //         ':' +
          //         `${trimTime}`.slice(1, 3) +
          //         ` ${amPm}`
          //     : `${trimTime}`.slice(0, 1) +
          //         ':' +
          //         `${trimTime}`.slice(1, 3) +
          //         ` ${amPm}`
          // }
          return insertColin(trimTime)
        }
        return trimmedTime(time) + ` ${amPm}`
      }
      return formattedTime(time)
    },
    getNamesArray: objList => {
      const names = objList.map(obj => obj.name)
      return names
    }
  }
}
</script>

<style scoped>
.top {
  padding-top: 35px;
}
</style>
